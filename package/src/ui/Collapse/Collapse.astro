---
import type { HTMLAttributes } from 'astro/types';
import type { Color } from '../../types/color';
import {
  getBgAndContentColorClass,
  getBgAndContentColorClassForFocus,
} from '../../utils/bgAndContentColor';
import { getBorderColorClass } from '../../utils/borderColor';
import Checkbox from '../Checkbox/Checkbox.astro';
import RadioInput from '../RadioInput/RadioInput.astro';
import type { CollapseIcon } from './types';

/**
 * Props for the Collapse component. Allows specifying the HTML tag to render.
 */
type Props = HTMLAttributes<'div'> & {
  /**
   * The type of icon to use for the collapse trigger. Options are 'arrow' or 'plus-minus'.
   * @default 'arrow'
   */
  triggerIcon?: CollapseIcon | undefined;

  /**
   * The interaction mode for the collapse.
   * - 'focus': The collapse opens when focused and closes when focus is lost.
   * - 'checkbox': The collapse acts like a checkbox, toggling open/closed on click.
   * - 'radio': The collapse behaves like a radio button group, allowing only one to be open at a time. Requires `name` to be set.
   *
   * @default 'checkbox' unless `focusColor` is provided, then 'focus'
   */
  mode?: 'focus' | 'checkbox' | 'radio';

  /**
   * The name attribute for the collapse's radio input. Used for grouping when only one collapse item should be open at a time.
   * This must be provided if `mode` is set to `radio`.
   */
  name?: string;

  /**
   * The base color scheme for the collapse. Sets both background and text/icon color.
   */
  color?: Color | undefined;

  /**
   * The color scheme to apply when the collapse is focused.
   * If set, the `mode` defaults to 'focus'.
   */
  focusColor?: Color | undefined;

  /**
   * The color of the border.
   * Only applied if `color` is not provided.
   *
   * @default 'base-300'
   */
  borderColor?: Color | undefined;
};

const {
  triggerIcon = 'arrow',
  name,
  color,
  focusColor,
  mode = focusColor ? 'focus' : 'checkbox',
  borderColor,
  class: providedClass,
  ...restProps
}: Props = Astro.props;

let cssClass = `collapse border ${getBorderColorClass(borderColor ?? 'base-300')}`;

if (color) {
  cssClass += ` ${getBgAndContentColorClass(color)}`;
}

if (focusColor) {
  cssClass += ` ${getBgAndContentColorClassForFocus(focusColor)}`;
}

if (triggerIcon) {
  if (triggerIcon === 'arrow') {
    cssClass += ' collapse-arrow';
  } else if (triggerIcon === 'plus-minus') {
    cssClass += ' collapse-plus';
  }
}

if (providedClass) {
  cssClass += ` ${providedClass}`;
}
---

<div class={cssClass} {...restProps}>
  {mode === 'checkbox' ? <Checkbox /> : null}
  {mode === 'radio' ? <RadioInput name={name} /> : null}
  <slot />
</div>
